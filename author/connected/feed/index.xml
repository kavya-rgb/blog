<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Connected &#8211; Connected </title>
	<atom:link href="./index.html" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description>Blog</description>
	<lastBuildDate>Thu, 10 Mar 2022 07:04:23 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.1</generator>
	<item>
		<title>Day 28 of Studying LeetCode Solution until I Can Solve One on My Own: Problem#166. Fraction to Recurring Decimal(Med/JavaScript)</title>
		<link>./../../../day-28-of-studying-leetcode-solution-until-i-can-solve-one-on-my-own-problem166-fraction-to-recurring-decimalmed-javascript/index.html</link>
					<comments>./../../../day-28-of-studying-leetcode-solution-until-i-can-solve-one-on-my-own-problem166-fraction-to-recurring-decimalmed-javascript/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 07:04:23 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../day-28-of-studying-leetcode-solution-until-i-can-solve-one-on-my-own-problem166-fraction-to-recurring-decimalmed-javascript/index.html</guid>

					<description><![CDATA[Intro: I am a former accountant turned software engineer graduated from coding bootcamp. Algorithms and Data Structure is an unavoidable part of interviews for most of the tech companies now. And one of my friends told me that you need to solve a medium leetcode problem under 60 seconds in order to get into the &#8230;<p class="read-more"> <a class="" href="./../../../day-28-of-studying-leetcode-solution-until-i-can-solve-one-on-my-own-problem166-fraction-to-recurring-decimalmed-javascript/index.html"> <span class="screen-reader-text">Day 28 of Studying LeetCode Solution until I Can Solve One on My Own: Problem#166. Fraction to Recurring Decimal(Med/JavaScript)</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p> <br />
</p>
<div data-article-id="1017584" id="article-body">
<p><strong>Intro:</strong> I am a former accountant turned software engineer graduated from coding bootcamp. Algorithms and Data Structure is an unavoidable part of interviews for most of the tech companies now. And one of my friends told me that you need to solve a medium leetcode problem under 60 seconds in order to get into the top tech companies.So I thought I&#8217;d start learning how to do it while job searching.</p>
<p>Since I have no clue on how to solve any of the problems (even the easy ones), I thought there is no point for me to waste hours and can&#8217;t get it figured out. <strong>Here is my approach:</strong></p>
<ul>
<li>Pick a leetcode problem randomly or Online Assessment from targeted companies.</li>
<li>Study 1-2 solutions from Youtube or LeetCode discussion section. One brute force solution, another one more optimal.</li>
<li>Write a blog post with detailed explanation and do a verbal walk through to help understand the solutions better.</li>
<li>Code out the solution in LeetCode without looking at the solutions</li>
<li>
<strong>Combat the forgetting curve:</strong> Re-do the question for the next three days. And come back regularly to revisit the problem.</li>
</ul>
<hr/>
<p><strong>166. Fraction to Recurring Decimal</strong><br /><code>Difficulty: Hard</code> <code>Language: JavaScript</code> </p>
<p>Given two integers representing the <code>numerator</code> and <code>denominator</code> of a fraction, return the fraction in string format.</p>
<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>
<p>If multiple answers are possible, return <strong>any of them</strong>.</p>
<p>It is <strong>guaranteed</strong> that the length of the answer string is less than 104 for all the given inputs.</p>
<p><strong>Example 1:</strong></p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Input: numerator = 1, denominator = 2
Output: "0.5"
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Example 2:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Input: numerator = 2, denominator = 1
Output: "2"
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Example 3:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Input: numerator = 4, denominator = 333
Output: "0.(012)"
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Constraints:</p>
<ul>
<li><code>-231 &lt;= numerator, denominator &lt;= 231 - 1</code></li>
<li><code>denominator != 0</code></li>
</ul>
<hr/>
<p><strong>Solution:</strong><br />To solve this problem:</p>
<ul>
<li>Address the edge case where numerator is 0</li>
<li>Accese the sign (&#8216;+&#8217; or &#8216;-&#8216;) of final result</li>
<li>Get the digit(s) on the left of the decimal point</li>
<li>Get the digit(s) on the right of the decimal point (use map for repeating digits.
</li>
</ul>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>var fractionToDecimal = function(numerator, denominator) {
    if(!numerator) return '0';

//if numerator(note 1)0 is 0 return 0. 

    let str="";

//initiate an empty string

  if(Math.sign(numerator) !== Math.sign(denominator)) str += '-';

//Add (note 4) '-' to the string if the sign (note 2) for
//numerator and denominator is different (note 3)

    const numer = Math.abs(numerator)
    const denom = Math.abs(denominator)

//Obtain the absolute value (note 5) for the numerator and
//denominator. So that we are working with positive integers in
//below process. The sign of the output is already decided on the
//step above.

    str += Math.floor(numer/denom);

//Find the largest integer less than or equal to a given number
//(the number on the left of the decimal point) and add(note 4) it
//to the string. For exmaple, give [5,2], 5/2 = 2.5, 
//Math.floor (5/2) is 2. We will add '2' to the string.

    let rem = numer%denom;

//access the remainder (note 7)of numerator devided by denominator

    if(!rem) return str;

//if there is no (note 1) remainder, the output is a while number,
//return string.

    str += '.'

//If there is remainder, that means output will have decimal
//point. Add (note 4) '.' to the string.

    const map = new Map();

//Create map (note 8) to store remainders, which will help us
//access repeating numbers after the decimal points.

    while(rem !== 0) {

//start calculating the digit(s) after the dicimal point until
//remainder is 0.

        map.set(rem, str.length);

//Update map (note 9) and set new remainder as key and new
//str.length as value. The length of string here will be used in
//case where there are repeating digits after decimal point; to
//insert '()' around repeating digits.

        rem *= 10;
        str += Math.floor(rem/denom);
        rem %= denom

//This is an important step to access the numbers after the
//decimal point.For example, 1/8 = 0.125. To access the '1' and
//add it to the string, we 
//1. multiply the numberator 1 by 10; then divide it by 8; the
//result is 1*10/8 = 1.25. Use Math.floor (note 6) to access the
//'1' on the left of the decimal point. 
//2. We have a remainder of 2 from 10 devided by 8 above. Repeat
//the process to get 2*10/8 = 2.5. Use Math.floor (note 6) to
//access the '2'.
//3.We have a remainder of 4 from 20 devided by 8 above. Repeat
//the process to get 4*10/8 = 5. Use Math.floor (note 6) to access
//the '5'.
//4.Combine the three steps above, we have '125' which is what we
// need to get the final output of '0.125.'

        if(map.has(rem)) {

//This is how we find the repeating digits:
//As we calculate the remainder from steps above, we are also
//saving remainders in the 'map'. Given [4,333], we will have a
//map that looks like below:
//{ [4 ,2],   //  At index 2 of 'str', 4/333 =&gt; remainder is 4
//  [40,3],   //  At index 3 of 'str', 40/333 =&gt; remainder is 40
//  [67,4] }  //  At index 4 of 'str', 400/333 =&gt; remainder is 67
//Then again, at index 5 we will meet a remainder of 4 from
//670/333, this is when we know we find the repeating digit and it
//starts at index 5.

            const idx = map.get(rem);

//Get (note 11) the index that can help us locate the
//repeating digit and it will be where we insert the '()'. In case
//of [4,333] from above, the first remainder we will find in the
//'map' is 4, which has a value of '2'. That means the numbers
//from index 2 through 4 will repeat at index 5 though 7 and so
//on.

            return str.slice(0, idx) + `(${str.slice(idx)})`; 

//Current 'str' is '0.012', index 0 though 1 (2 is excluded) is
//sliced off (note 12). And starting from index 2, we add "()"
//around it. Now we have '0.' + '(012)' which is '0.(012)'.

        }
    }
    return str;
};
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<hr/>
<p><strong>References:</strong><br /><a href="https://leetcode.com/problems/fraction-to-recurring-decimal/">LeetCode Problem Link</a><br /><a href="https://leetcode.com/problems/fraction-to-recurring-decimal/discuss/1029272/JavaScript-Solution">LeetCode Discussion: control_the_narrative</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT">Note 1: Logical NOT (!)</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign">Note 2: Math.sign()</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality">Note 3: Strict inequality(!==)</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment">Note 4: Addition assignment(+=)</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs">Note 5: Math.abs()</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">Note 6: Math.floor()</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder">Note 7: Remainder (%)</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Note 8: Map</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set">Note 9: Map.set()</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has">Note 10: Map.has</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get">Note 11: Map.get</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice">Note 12: String.slice()</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">Note 13: String Interpolation</a><br /><a href="https://www.istockphoto.com/portfolio/monsitj?mediatype=photography">Blog Cover Image Credit</a> </p>
</p></div>

]]></content:encoded>
					
					<wfw:commentRss>./../../../day-28-of-studying-leetcode-solution-until-i-can-solve-one-on-my-own-problem166-fraction-to-recurring-decimalmed-javascript/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Local (AMP) dev server help</title>
		<link>./../../../local-amp-dev-server-help/index.html</link>
					<comments>./../../../local-amp-dev-server-help/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 07:02:26 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../local-amp-dev-server-help/index.html</guid>

					<description><![CDATA[Is this the right channel for asking for help with install / configure apache, mariaDB and PHP on arch based linux? Well, I will try it 🙂 I&#8217;m using Endeavour OS which is arch based distro. I try to install Apache, MariaDB and PHP. I used this guide [https://ostechnix.com/install-apache-mariadb-php-lamp-stack-on-arch-linux-2016/](https://ostechnix.com/install-apache-mariadb-php-lamp-stack-on-arch-linux-2016/) I have problems with PHP, I &#8230;<p class="read-more"> <a class="" href="./../../../local-amp-dev-server-help/index.html"> <span class="screen-reader-text">Local (AMP) dev server help</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p><br />
<img src="https://external-preview.redd.it/xWErZ8vNbN4TxPoiMXCOSFC1LfJw8ey3LiGUMWiXKrs.jpg?auto=webp&amp;s=a6d95a43d69e38dffc4ae2f33af0b0028d73f29e" /></p>
<p>Is this the right channel for asking for help with install / configure apache, mariaDB and PHP on arch based linux?</p>
<p>Well, I will try it <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>I&#8217;m using Endeavour OS which is arch based distro. I try to install Apache, MariaDB and PHP. I used this guide [https://ostechnix.com/install-apache-mariadb-php-lamp-stack-on-arch-linux-2016/](https://ostechnix.com/install-apache-mariadb-php-lamp-stack-on-arch-linux-2016/)</p>
<p>I have problems with PHP, I didn&#8217;t installed &#8220;php7 php7-apache&#8221; instead of &#8220;php php-apache&#8221; because I need php 7.4After completing the guide I restarted apache and try if php is working but I got this:[https://postimg.cc/nCGyQmPr](https://postimg.cc/nCGyQmPr)</p>
<p>After that when I tried to find a solution someone mentioned that the right way is to install php7-fpm</p>
<p>Anyway&#8230; any suggestions welcome.</p>
<p>&amp;#x200B;</p>

]]></content:encoded>
					
					<wfw:commentRss>./../../../local-amp-dev-server-help/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Connecting to private Ec2 Instances using Systems Manager &#8211; A Hands-On Guide</title>
		<link>./../../../connecting-to-private-ec2-instances-using-systems-manager-a-hands-on-guide/index.html</link>
					<comments>./../../../connecting-to-private-ec2-instances-using-systems-manager-a-hands-on-guide/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 07:00:48 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../connecting-to-private-ec2-instances-using-systems-manager-a-hands-on-guide/index.html</guid>

					<description><![CDATA[Systems Manager is a wonderful service and has many untapped features!! One common feature that has become popular in the recent past is connecting to Ec2 instances instead of using ssh. The setup guide for Systems Manager is very exhaustive and it’s not very clear on what’s the minimum that you require to enable it &#8230;<p class="read-more"> <a class="" href="./../../../connecting-to-private-ec2-instances-using-systems-manager-a-hands-on-guide/index.html"> <span class="screen-reader-text">Connecting to private Ec2 Instances using Systems Manager &#8211; A Hands-On Guide</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p> <br />
</p>
<div data-article-id="1010452" id="article-body">
<p>Systems Manager is a wonderful service and has many untapped features!! One common feature that has become popular in the recent past is connecting to Ec2 instances instead of using ssh. The <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-ec2.html">setup guide</a> for Systems Manager is very exhaustive and it’s not very clear on what’s the minimum that you require to enable it in your account. This article focuses on the minimal steps involved to do just that. We will go through what resources we plan on using, to build it. Instead  of using the console, we will use CloudFormation. I will assume that you have an existing network so my scripts work with them. In case this is a new account feel free to use my utility script to build a 3 tier network from scratch and then apply the script I provide within the resources. So, if you see me mention <code>first script</code> in this article, I refer to this 3 tier network script, which you are free to reuse.</p>
<p><em>My focus on CloudFormation is to automate the process and also to help those who are learning for the AWS exams to refer to a working sample. I could have done it in Terraform but I wanted to stick to AWS products and features instead.</em></p>
<p><em>For those of you who are not familiar with the resources we are building using CloudFormation and its properties, I have added references in the resources section down below.</em></p>
<h4>
  <a name="prerequisites" href="#prerequisites"><br />
  </a><br />
  Prerequisites:<br />
</h4>
<ol>
<li>
<p>Log in as an IAM admin user or a role that has the permissions to run cloudformation. [This article is not heavily focused on the privilege of this logon identity. Feel free to make it least privileged if you need to. Our focus will be on enabling systems manager which is the main theme of the article.]</p>
</li>
<li>
<p>You need a VPC for this exercise. You can use an existing VPC with a minimum of 2 subnets. The default VPC also works but I would strongly advise against it for production systems. If you don’t have a VPC or want to create a new custom one for this exercise, check the resources section to build one before you enable systems manager.</p>
</li>
</ol>
<h4>
  <a name="resources-to-build" href="#resources-to-build"><br />
  </a><br />
  Resources to Build<br />
</h4>
<h5>
  <a name="1-a-new-myssmrole-that-does-the-following-" href="#1-a-new-myssmrole-that-does-the-following-"><br />
  </a><br />
  1. A new mySsmRole that does the following &#8211;<br />
</h5>
<ul>
<li>Has a trust policy for ec2 </li>
<li>Has 2 main managed policies attached namely &#8211;</li>
</ul>
<p><u><code>AmazonSSMManagedInstanceCore</code></u><br />This required trust policy enables an instance to use Systems Manager core service functionality. It provides minimum permissions which allow the instance to:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>* Register as a managed instance
* Send heartbeat information
* Send and receive messages for Run Command and Session Manager
* Retrieve State Manager association details
* Read parameters in Parameter Store
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>This policy replaces the old <em><code>AmazonEC2RoleforSSM</code></em> policy and is <strong><em>mandatory</em></strong></p>
<p><u><code>CloudWatchAgentServerPolicy</code></u><br />This policy <em>enables</em> the Amazon CloudWatch agent, by allowing access to <em>read</em> instance information and <em>write</em> it to CloudWatch Logs, Metrics and EventBridge. Permissions also grant access to <em>read Amazon EC2 tags, volumes, and CloudWatch configuration parameters in Parameter Store</em>. You can also create a more restrictive policy that, for example, limits writing access to a specific CloudWatch Logs log stream. For more details, refer to the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/create-iam-roles-for-cloudwatch-agent.html#create-iam-roles-for-cloudwatch-agent-roles">CloudWatch user guide</a>.</p>
<p><u><code>AmazonSSMDirectoryServiceAccess</code></u> [Only applicable for Windows users joining a Domain server]<br />This instance trust policy enables a managed instance to seamlessly join a domain by providing access to the required AWS Directory Service API actions. This is optional. In my article, I am not going to add it.</p>
<p>Now that you have some background information, lets build our script starting with the role</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Resources:
  MySsmRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role that allows SSM capability
      ManagedPolicyArns:
        - !Ref CWAgentServerPolicyArn
        - !Ref SSMManagedInstanceCoreArn
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Tags:
        - Key: Name
          Value: mySsmRole
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><em>notice the 2 managed policies that are attached and the trust policy for ec2</em></p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Parameters:
  CWAgentServerPolicyArn:
    Type: String
    Default: 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
  SSMManagedInstanceCoreArn:
    Type: String
    Default: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><em>these default values were fetched by visiting the IAM page and manually copying the ARN&#8217;s</em></p>
<p>Note: Remember that CloudFormation adds prefixes and suffixes to <code>mySsmRole</code> to make them unique during a deployment.</p>
<h5>
  <a name="2-create-an-instance-profile" href="#2-create-an-instance-profile"><br />
  </a><br />
  2. Create an instance profile<br />
</h5>
<p>From the console, when you attach a role to an EC2, an instance profile is automatically created. Now, when you automate this instead using CloudFormation or Terraform it&#8217;s your responsibility to create it. The instance profile is just a container that is created within EC2 to pass the iam role and the permissions attached to it.</p>
<p>So our script would now look like &#8211;</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>  MyEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "https://dev.to/"
      Roles:
      - !Ref MySsmRole
      InstanceProfileName: MySsmRoleInstanceProfile
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><em>remember MySsmRole was just created in step 1</em></p>
<h5>
  <a name="a-note-on-cloudformation-conditional-statements" href="#a-note-on-cloudformation-conditional-statements"><br />
  </a><br />
  A note on CloudFormation conditional statements<br />
</h5>
<p>Before we continue to the next section, I would like to explain how to add conditions into our script. This will be employed so our script can work with both existing VPC, subnets or route tables and with values that you provide.</p>
<p>My idea is that if you have used my basic 3 tier network script from the resources section, those values will be automatically imported cross stack. If you instead want to provide your own values you are free to do so.</p>
<p>Here is how I am doing it. For example &#8211; for a VPC id, by default I set the value to an empty string.</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>clientVpc:
    Type: String 
    Default: ''
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>If you override it with a value, then this snippet will return a <code>true</code> value</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>clientVpcExists: !Not [ !Equals [!Ref clientVpc, '']]
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Now, in the place where I have to use a VPC id, I place an if condition around it to use client VPC if it exists, otherwise to import the value from my previous stack</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>VpcId: !If [clientVpcExists, !Ref clientVpc, !ImportValue MyVpc]
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>With this understanding let&#8217;s continue with the next section.</p>
<h5>
  <a name="3-create-interface-and-gateway-endpoints" href="#3-create-interface-and-gateway-endpoints"><br />
  </a><br />
  3. Create Interface and Gateway Endpoints<br />
</h5>
<p>Our The EC2 instances are private. There is no internet connectivity. To allow the ability to connect using systems manager, we are going to add the 4 mandatory endpoints seen in the table below. All optional ones though mentioned here, will not be added unless you have a need for it. In that case, please modify my script, as you need.</p>
<div class="table-wrapper-paragraph">
<table>
<thead>
<tr>
<th>Endpoint</th>
<th>Purpose</th>
<th>Is Mandatory</th>
</tr>
</thead>
<tbody>
<tr>
<td>com.amazonaws.region.ssm</td>
<td>For the Systems Manager service</td>
<td>Yes</td>
</tr>
<tr>
<td>com.amazonaws.region.ssmmessages</td>
<td>To connect to our instances through a secure data channel using Session Manager</td>
<td>Yes</td>
</tr>
<tr>
<td>com.amazonaws.region.ec2</td>
<td>To create snapshots or call EBS</td>
<td>Yes</td>
</tr>
<tr>
<td>com.amazonaws.region.ec2messages</td>
<td>Systems Manager uses this endpoint to make calls from SSM Agent to the Systems Manager service</td>
<td>Yes</td>
</tr>
<tr>
<td>com.amazonaws.region.s3</td>
<td>Systems Manager uses this endpoint to update SSM Agent, perform patching operations, and for tasks like uploading output logs you choose to store in S3 buckets, retrieving scripts or other files you store in buckets, and so on. If the security group associated with your instances restricts outbound traffic, you must add a rule to allow traffic to the prefix list for Amazon S3.</td>
<td>Yes</td>
</tr>
</tbody>
</table>
</div>
<p>Sample snippets of our endpoints would look like &#8211;</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>ec2InterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcId: !If [clientVpcExists, !Ref clientVpc, !ImportValue MyVpc]
      SubnetIds: 
        - !If [clientSubnetAExists, !Ref clientSubnetA, !ImportValue AppSubnetA]
        - !If [clientSubnetBExists, !Ref clientSubnetB, !ImportValue AppSubnetB]
      SecurityGroupIds:
        - !Ref myDefaultSecurityGroup
      PrivateDnsEnabled: true
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><em>everything looks similar for ec2MessagesInterfaceEndpoint, and ssmInterfaceEndpoint except for the ServiceName that has the service specific endpoint as seen in the table above</em></p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !If [clientVpcExists, !Ref clientVpc, !ImportValue MyVpc]
      RouteTableIds:
        - !If [clientRouteTableAExists, !Ref clientRouteTableA, !ImportValue PrivateARouteTable]
        - !If [clientRouteTableBExists, !Ref clientRouteTableB, !ImportValue PrivateBRouteTable]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><em>notice the gateway endpoint here adds route table entries instead</em></p>
<p>My parameters and conditions to make these work are as follows</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>  clientVpc:
    Type: String 
    Default: ''
  clientSubnetA:
    Type: String
    Default: ''
  clientSubnetB:
    Type: String
    Default: ''
  clientRouteTableA:
    Type: String
    Default: ''
  clientRouteTableB:
    Type: String
    Default: ''
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>Conditions:
  clientVpcExists: !Not [ !Equals [!Ref clientVpc, '']]
  clientSubnetAExists: !Not [ !Equals [!Ref clientSubnetA, '']]
  clientSubnetBExists: !Not [ !Equals [!Ref clientSubnetB, '']]
  clientRouteTableAExists: !Not [ !Equals [!Ref clientRouteTableA, '']]
  clientRouteTableBExists: !Not [ !Equals [!Ref clientRouteTableB, '']]
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>For reference &#8211; the complete script is available in the resources section.</p>
<h5>
  <a name="notes-for-success" href="#notes-for-success"><br />
  </a><br />
  Notes for success:<br />
</h5>
<ul>
<li>The default security group id that you provide to this script must allow for all access. This will be used by ssm and allows your private instance to receive updates from the internet using the endpoints.</li>
<li>The default security group should be part of the VPC that you chose to build your resources with.</li>
<li>The subnets must be part of the VPC and in the same region.</li>
<li>The private route table must be associated to the private subnets within the VPC.</li>
<li>When a new instance is ready and running, the systems manager connect button must be enabled if everything was done right. Or you will have to backtrack and identify what step you missed.</li>
<li>Most modern linux versions have systems manager agent installed on them. This is <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-manual-agent-install.html">documented here</a>. If your OS is not supported check the guide on how to install the ssm agent.</li>
<li>The first time the instance tries to connect the ssm agent is enabled and ready to use. </li>
<li>Failure to enable systems manager and the reason for its failure is not provided as a feedback. Instead you are provided with an 8 step guide on <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-ec2.html">enabling systems manager</a>.</li>
</ul>
<h4>
  <a name="testing-our-script" href="#testing-our-script"><br />
  </a><br />
  Testing Our Script<br />
</h4>
<h5>
  <a name="1-testing-script-with-a-custom-vpc-using-cloudformation-console" href="#1-testing-script-with-a-custom-vpc-using-cloudformation-console"><br />
  </a><br />
  1. Testing script with a custom VPC using CloudFormation Console<br />
</h5>
<p>For ease, I will use the script within this article for the custom VPC values. Feel free to use your own values instead.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mEnaAOrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c9lbz9jw72976ik8dhu.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mEnaAOrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c9lbz9jw72976ik8dhu.png" alt="Image description" loading="lazy" width="880" height="721"/></a></p>
<p><em>here I will not set any client variables as I am going to use the imported values that were exported cross stack from my first script</em></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8LuImwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgjxa5nlw9bnick0slnt.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8LuImwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgjxa5nlw9bnick0slnt.png" alt="default values" loading="lazy" width="880" height="543"/></a><br /><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AUMk3hNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqik16lxkfn8rwyy19cj.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUMk3hNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqik16lxkfn8rwyy19cj.png" alt="default values" loading="lazy" width="880" height="709"/></a><br /><em>click next</em></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dr0QSOul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rqq93p1e38q3vdt66ie.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dr0QSOul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rqq93p1e38q3vdt66ie.png" alt="review" loading="lazy" width="880" height="676"/></a><br /><em>acknowledge and create stack</em></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WrJobVaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zlt1ogkqty3cacssogf.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrJobVaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zlt1ogkqty3cacssogf.png" alt="script complete" loading="lazy" width="880" height="292"/></a></p>
<h5>
  <a name="verifying-ssm-access-using-a-new-ec2-instance" href="#verifying-ssm-access-using-a-new-ec2-instance"><br />
  </a><br />
  Verifying ssm access using a new ec2 instance<br />
</h5>
<p>Lets launch a new instance using the free tier ami&#8217;s. The only difference from your regular choices are the ones that are captured here below. Please make sure that these are set right.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2J22-Syw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpf81v6vtzbm92gyvd4h.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2J22-Syw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpf81v6vtzbm92gyvd4h.png" alt="vpc settings and role" loading="lazy" width="880" height="400"/></a><br /><em>here choose myVpc, the appA subnet and the new instance profile that was created</em></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtUksOyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou2noraloue05lfxibvz.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtUksOyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou2noraloue05lfxibvz.png" alt="tag" loading="lazy" width="880" height="384"/></a><br /><em>give the instance a meaningful name</em></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-PcbCAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj307bfll5pst0jfieww.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-PcbCAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj307bfll5pst0jfieww.png" alt="defaultSg" loading="lazy" width="880" height="397"/></a><br /><em>choose the default security group</em></p>
<p>and finally launch the instance. Wait for it to go into a running state then connect to the ec2 instance.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKrMCZw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z83cq8puuz6nfdxydn4c.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKrMCZw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z83cq8puuz6nfdxydn4c.png" alt="connect" loading="lazy" width="880" height="742"/></a><br /><em>click connect</em></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xB8cMox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct5utazcehj51lg8jddh.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xB8cMox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct5utazcehj51lg8jddh.png" alt="session manager enabled" loading="lazy" width="880" height="485"/></a><br /><em>when session manager is enabled, the connect button is available to click</em></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--noaGgI0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rapuhluw7cbajlcfn6ce.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--noaGgI0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rapuhluw7cbajlcfn6ce.png" alt="ssm" loading="lazy" width="880" height="453"/></a><br /><em>a successful yum update on the new private instance connected privately</em></p>
<h5>
  <a name="cleanup" href="#cleanup"><br />
  </a><br />
  Cleanup<br />
</h5>
<p>If you have not done it already, terminate your private instance and delete ssm stack so you don&#8217;t end paying for the endpoints while it&#8217;s not in use.</p>
<h5>
  <a name="2-testing-script-with-a-default-vpc-using-cloudformation-console" href="#2-testing-script-with-a-default-vpc-using-cloudformation-console"><br />
  </a><br />
  2. Testing script with a default VPC using CloudFormation Console<br />
</h5>
<p>Now, for ease to test with a different VPC I am going to use the default VPC. You may ask, are VPC endpoints needed because they are by default public. So I tested and found that a new instance that is created with just the role doesn&#8217;t enable the systems manager</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vYB0kG50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8kwaa0b4y0x61xyju2c.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vYB0kG50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8kwaa0b4y0x61xyju2c.png" alt="unable to connect" loading="lazy" width="880" height="683"/></a><br /><em>a typical error message when it cant connect</em></p>
<p>So, in order to test my script and adapt to the default VPC, I had to modify it slightly and comment out a line of code within the s3 gateway endpoint because default VPC&#8217;s only have 1 route entry.</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !If [clientVpcExists, !Ref clientVpc, !ImportValue MyVpc]
      RouteTableIds:
        - !If [clientRouteTableAExists, !Ref clientRouteTableA, !ImportValue PrivateARouteTable]
        # - !If [clientRouteTableBExists, !Ref clientRouteTableB, !ImportValue PrivateBRouteTable]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><em>notice the second line is commented out</em></p>
<p>Now, if you launch the script and provide the client VPC id, 2 subnet id&#8217;s, and the private route table id for clientRouteTableA parameter, the script will successfully deploy.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVkqZxtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ottz7u4wgezp875877bo.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVkqZxtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ottz7u4wgezp875877bo.png" alt="overrides" loading="lazy" width="880" height="728"/></a><br /><em>notice all values are overriden with default VPC values. all other options are same as the previous scenario to create the stack</em></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--igOd0pxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu2bbpmexpuf5kv6e6m9.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--igOd0pxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu2bbpmexpuf5kv6e6m9.png" alt="tag" loading="lazy" width="880" height="393"/></a></p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzwKaTVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxd3k2blqexpede8kft6.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzwKaTVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxd3k2blqexpede8kft6.png" alt="default sg" loading="lazy" width="880" height="402"/></a></p>
<p>Once the instances are running you now see that you can connect to this public instance.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED4tSZco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn0us2m4ksqf3qhp746m.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED4tSZco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn0us2m4ksqf3qhp746m.png" alt="ssm connect" loading="lazy" width="880" height="485"/></a></p>
<p><strong>Congratulations</strong> You just got Systems Manager enabled in your accounts.</p>
<h5>
  <a name="cleanup" href="#cleanup"><br />
  </a><br />
  Cleanup<br />
</h5>
<p>Just like the last time, cleanup after yourself by terminating your public instance and delete ssm stack so you don&#8217;t end paying for the endpoints while it&#8217;s not in use.</p>
<h4>
  <a name="resources" href="#resources"><br />
  </a><br />
  Resources<br />
</h4>
<p><strong>[about Lionel Pulickal]</strong></p>
<p><em>Lionel is a Cloud Engineer who has worked in the IT industry since 1997. He has all the three AWS associate level exams, the solution architect professional and networking specialty exams under his belt. He loves hands-on and always loves to share the knowledge he has gained over the years.</em></p>
</p></div>

]]></content:encoded>
					
					<wfw:commentRss>./../../../connecting-to-private-ec2-instances-using-systems-manager-a-hands-on-guide/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Let&#8217;s have a blast of fun! How to build a Minesweeper clone for the CLI with NodeJS 💣🔍</title>
		<link>./../../../lets-have-a-blast-of-fun-how-to-build-a-minesweeper-clone-for-the-cli-with-nodejs-%f0%9f%92%a3%f0%9f%94%8d/index.html</link>
					<comments>./../../../lets-have-a-blast-of-fun-how-to-build-a-minesweeper-clone-for-the-cli-with-nodejs-%f0%9f%92%a3%f0%9f%94%8d/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 07:00:06 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../lets-have-a-blast-of-fun-how-to-build-a-minesweeper-clone-for-the-cli-with-nodejs-%f0%9f%92%a3%f0%9f%94%8d/index.html</guid>

					<description><![CDATA[(Cover photo by Flickr user FolsomNatural) Hands up &#8211; who has played this absolute classic for hours on end? 🙋 I remember playing it as a kid. There&#8217;s a myriad of different implementations, even 3D versions of it. Heck, I even play it today from time to time. So why not build our own version &#8230;<p class="read-more"> <a class="" href="./../../../lets-have-a-blast-of-fun-how-to-build-a-minesweeper-clone-for-the-cli-with-nodejs-%f0%9f%92%a3%f0%9f%94%8d/index.html"> <span class="screen-reader-text">Let&#8217;s have a blast of fun! How to build a Minesweeper clone for the CLI with NodeJS 💣🔍</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p> <br />
</p>
<div data-article-id="1014424" id="article-body">
<p><em>(Cover photo by Flickr user <a href="https://www.flickr.com/photos/87249144@N08/">FolsomNatural</a>)</em></p>
<p>Hands up &#8211; who has played this absolute classic for hours on end? <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f64b.png" alt="🙋" class="wp-smiley" style="height: 1em; max-height: 1em;" /> I remember playing it as a kid. There&#8217;s a myriad of different implementations, even 3D versions of it. Heck, I even play it today from time to time. So why not build our own version on the CLI using Node? </p>
<blockquote>
<p>I also want to give a shoutout to @krystofex who supported me via buymeacoffee! <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2615.png" alt="☕" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Thank you very much for your support, it is highly appreciated and I already enjoyed a delicious coffee on my way home the other day! <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/263a.png" alt="☺" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
</blockquote>
<h2>
  <a name="setting-the-stage" href="#setting-the-stage"><br />
  </a><br />
  Setting the stage<br />
</h2>
<p>This will be a CLI app, as lean as possible, no external dependencies. That should work reasonably well, given that most things, like argument parsing and displaying things in a structured manner in the CLI, work out of the box pretty nicely.</p>
<p>Let&#8217;s first have a look at the game rules, though.</p>
<p>Minesweeper is usually played on a square field. 10&#215;10, 60&#215;60, you get the drill. A certain number of so called &#8220;mines&#8221; is placed randomly onto the field. The player now has to flag all these mines and <em>only</em> these mines. For this, they can place flags onto the field where they think a mine is located. To figure out where the mines are, the player can uncover fields. By doing so, they can see how many adjacent fields have mines. Uncovering a field with no adjacent mine uncovers all neighbours with no adjacent mines, too. What does that mean exactly, though?</p>
<p>Let&#8217;s have a look at a 5 by 5 field with 3 mines:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>+----------+
|0 0 0 0 0 |
|2 2 1 1 1 |
|m m 1 1 m |
|2 2 1 1 1 |
|0 0 0 0 0 |
+----------+
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>The mines are marked with <code>m</code>, the numbers show how many neighbours have a mine. All 8 surrounding cells count as neighbours. When the game starts out, none of these are visible. The player then choses to uncover the top left cell. What they&#8217;ll see is this:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>+----------+
|0 0 0 0 0 |
|2 2 1 1 1 |
|          |
|          |
|          |
+----------+
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>By uncovering a field with no adjacent mines, all neighbours that are not mines are uncovered, until a cell has a neighbouring mine.</p>
<p>If the player accidentally uncovers a mine, they lose the game. If they manage to flag all mines correctly, they win the game. The simplicity of this is what&#8217;s really making it addictive. &#8220;I <em>almost</em> managed to win last time, this time I&#8217;ll make it!&#8221; &#8211; right? Also, the game feels kind of unfair from time to time. The chances of the player randomly hitting a mine are <code>width * height / number of mines</code>. In a standard small 10 by 10 setup with 8 mines, that&#8217;s an 8% chance of hitting a mine. Pretty slim, huh? Well, until you manage to hit a mine on the first move <em>for the third loving time in a row, <strong>for goodness sake, why is it doing this to me??</strong></em></p>
<p>Ok, I might have played it a bit too often. I need to calm down, we&#8217;re here to <em>build</em> it, not necessarily to <em>win</em> it.</p>
<h2>
  <a name="parsing-arguments" href="#parsing-arguments"><br />
  </a><br />
  Parsing arguments<br />
</h2>
<p>Ok, the heart rate has gone down.</p>
<p>To figure out how large the field should be and how many mines we should place, we&#8217;re going to use console arguments.</p>
<p>The app should be callable like so:</p>
<div class="highlight js-code-highlight">
<pre class="highlight shell"><code>node minesweeper.js <span class="nt">--width</span><span class="o">=</span>10 <span class="nt">--height</span><span class="o">=</span>10 <span class="nt">--mines</span><span class="o">=</span>20
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>This should result in a 10&#215;10 playing field with 10 randomly placed mines.</p>
<p>We&#8217;ll use some regular expressions to parse out these arguments:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">const</span> <span class="nx">getArg</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="dl">'</span><span class="s1">--</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">=(</span><span class="se">\\</span><span class="s1">d+)</span><span class="dl">'</span><span class="p">))</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">match</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Missing argument </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">width</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">let</span> <span class="nx">height</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">let</span> <span class="nx">mines</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">width</span> <span class="o">=</span> <span class="nx">getArg</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="dl">'</span><span class="s1">width</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">height</span> <span class="o">=</span> <span class="nx">getArg</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="dl">'</span><span class="s1">height</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">mines</span> <span class="o">=</span> <span class="nx">getArg</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="dl">'</span><span class="s1">mines</span><span class="dl">'</span><span class="p">)</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">width</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">height</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Field size must be positive</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Since all our arguments are numeric, we can perfectly use <code>\d+</code> and the arguments name as a regular expression, parse out the number and use that. The only thing we need to care about is that we don&#8217;t want 0 for either the width or the height &#8211; that wouldn&#8217;t make much sense anyways, would it?. We do allow for 0 mines, though. Easy mode. Juuust to calm the nerves. For. A. Little. Bit.</p>
<h2>
  <a name="building-the-field" href="#building-the-field"><br />
  </a><br />
  Building the field<br />
</h2>
<p>Where were we? Right.</p>
<p>Now we create a little utility function:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">const</span> <span class="nx">getNeighbouringCoords</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span>
  <span class="p">[</span><span class="nx">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span>
  <span class="p">[</span><span class="nx">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">x</span><span class="p">],</span>
  <span class="p">[</span><span class="nx">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
  <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
  <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span>
  <span class="p">[</span><span class="nx">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span>
  <span class="p">[</span><span class="nx">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">x</span><span class="p">],</span>
  <span class="p">[</span><span class="nx">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
<span class="p">].</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="nx">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">width</span> <span class="o">&amp;&amp;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">height</span>
<span class="p">))</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>This will give us an array of up to 8 coordinate pairs for given X and Y coordinates. This will be useful later on. We can use it to determine which fields to uncover and where to set those numbers we&#8217;ve seen before.</p>
<p>Then we need some way to keep the data. There&#8217;s essentially three kinds of matrices we&#8217;re going to need:</p>
<ul>
<li>One to keep track where those pesky mines are (and the numbers around them)</li>
<li>One to keep track which fields the player has uncovered so far</li>
<li>And lastly, one to keep track which fields the player has flagged as &#8220;contains a mine&#8221;
</li>
</ul>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">const</span> <span class="nx">createMatrix</span> <span class="o">=</span> <span class="nx">v</span> <span class="o">=&gt;</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">width</span><span class="p">).</span><span class="nx">fill</span><span class="p">([]).</span><span class="nx">map</span><span class="p">(</span>
  <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">height</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
<span class="p">)</span>

<span class="kd">const</span> <span class="nx">field</span> <span class="o">=</span> <span class="nx">createMatrix</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="c1">// We'll overwrite this matrix later, hence `let`</span>
<span class="kd">let</span> <span class="nx">uncoveredField</span> <span class="o">=</span> <span class="nx">createMatrix</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">flaggedField</span> <span class="o">=</span> <span class="nx">createMatrix</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Next, we&#8217;ll place the mines. For this we generate some random X/Y coordinates. We skip if there&#8217;s already a mine there to make sure that the player gets the full amount of fun.</p>
<p>Once a mine is set, we increase all the neighbouring cells by <code>1</code>. This will generate the characteristic number patterns:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="k">while</span> <span class="p">(</span><span class="nx">mines</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">mineX</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">width</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
  <span class="kd">const</span> <span class="nx">mineY</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">height</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">field</span><span class="p">[</span><span class="nx">mineY</span><span class="p">][</span><span class="nx">mineX</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">m</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">field</span><span class="p">[</span><span class="nx">mineY</span><span class="p">][</span><span class="nx">mineX</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">m</span><span class="dl">'</span>

    <span class="nx">getNeighbouringCoords</span><span class="p">(</span><span class="nx">mineX</span><span class="p">,</span> <span class="nx">mineY</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">filter</span><span class="p">(([</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">field</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">m</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">field</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span><span class="o">++</span>
      <span class="p">})</span>

    <span class="nx">mines</span><span class="o">--</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Let&#8217;s test that:</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>+----------+
|0 1 2 2 1 |
|0 1 m m 1 |
|0 1 2 3 2 |
|0 0 0 1 m |
|0 0 0 1 1 |
+----------+
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Works like a charm!</p>
<h2>
  <a name="check-if-the-player-has-won" href="#check-if-the-player-has-won"><br />
  </a><br />
  Check if the player has won<br />
</h2>
<p>To figure out if the player has won, we need to compare the flags set by the player with the positions of the mines. This means, that if there&#8217;s a flag at a position where there&#8217;s no mine, the player hasn&#8217;t won. We can use <code>every</code> for this:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">const</span> <span class="nx">checkIfWon</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">flaggedField</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">row</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span>
      <span class="p">(</span><span class="nx">cell</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="nx">cell</span> <span class="o">&amp;&amp;</span> <span class="nx">field</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">m</span><span class="dl">'</span><span class="p">)</span>
          <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="nx">cell</span> <span class="o">&amp;&amp;</span> <span class="nx">field</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">m</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">})</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>What this does is that it reduces every row to either <code>true</code> or <code>false</code> depending if every field matches the condition or not. All the rows are then reduced to a single boolean by simply asking &#8220;are all rows true&#8221;.</p>
<h2>
  <a name="rendering-the-field" href="#rendering-the-field"><br />
  </a><br />
  Rendering the field<br />
</h2>
<p>This will be a bit tricky. A cell can have one of three possible states: Covered, uncovered and flagged. An uncovered cell can either be 0, any number from 1 to 8, or a mine. A cell can also be where the cursor currently is.</p>
<p>We&#8217;re going to use emoji to display the field. First, let&#8217;s define which emojis we&#8217;re going to use for the uncovered cells:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">const</span> <span class="nx">characterMap</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">m</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&#x1f4a3;</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// I kinda developed an aversion to that emoji.</span>
  <span class="mi">0</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&#x2b1c;</span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">1</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1&#x20e3; </span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">2</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2&#x20e3; </span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">3</span><span class="p">:</span> <span class="dl">'</span><span class="s1">3&#x20e3; </span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">4</span><span class="p">:</span> <span class="dl">'</span><span class="s1">4&#x20e3; </span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">5</span><span class="p">:</span> <span class="dl">'</span><span class="s1">5&#x20e3; </span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">6</span><span class="p">:</span> <span class="dl">'</span><span class="s1">6&#x20e3; </span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">7</span><span class="p">:</span> <span class="dl">'</span><span class="s1">7&#x20e3; </span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">8</span><span class="p">:</span> <span class="dl">'</span><span class="s1">8&#x20e3; </span><span class="dl">'</span><span class="p">,</span>
<span class="p">}</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Next, we define a function to render the field. It should clear the CLI output first and already render the top and bottom walls:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">const</span> <span class="nx">renderField</span> <span class="o">=</span> <span class="p">(</span><span class="nx">playerX</span><span class="p">,</span> <span class="nx">playerY</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">clear</span><span class="p">()</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">&#x1f9f1;</span><span class="dl">'</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="nx">width</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

  <span class="c1">// ...</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">&#x1f9f1;</span><span class="dl">'</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="nx">width</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Press ENTER to uncover a field, SPACE to place a flag</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Then we need to loop over the playing field. We can already add the left and right wall to every row.</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="c1">// ...</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">height</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">row</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">&#x1f9f1;</span><span class="dl">'</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">width</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
  <span class="nx">row</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">&#x1f9f1;</span><span class="dl">'</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// ...</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>To finish the rendering, we now only need to add the different states for every x and y coordinates:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">height</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">row</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">&#x1f9f1;</span><span class="dl">'</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">width</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">playerX</span> <span class="o">&amp;&amp;</span> <span class="nx">y</span> <span class="o">===</span> <span class="nx">playerY</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">row</span> <span class="o">+=</span> <span class="dl">'</span><span class="se">\</span><span class="s1">x1b[47m</span><span class="se">\</span><span class="s1">x1b[30m</span><span class="dl">'</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">flaggedField</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
      <span class="nx">row</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">&#x1f6a9;</span><span class="dl">'</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">uncoveredField</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">])</span> <span class="p">{</span>
      <span class="nx">row</span> <span class="o">+=</span> <span class="nx">characterMap</span><span class="p">[</span><span class="nx">field</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]]</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">row</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">  </span><span class="dl">'</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">playerX</span> <span class="o">&amp;&amp;</span> <span class="nx">y</span> <span class="o">===</span> <span class="nx">playerY</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">row</span> <span class="o">+=</span> <span class="dl">'</span><span class="se">\</span><span class="s1">x1b[0m</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">row</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">&#x1f9f1;</span><span class="dl">'</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span>
<span class="p">}</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>You might&#8217;ve noticed the two <code>if</code> statements with the weird characters. <code>\x1b[47m</code> gives the CLI a white background for the following text, <code>\x1b[30m</code> makes the following text black. For most CLIs out there, that essentially means inverting the standard color. This is used as an indicator to where the player&#8217;s cursor currently is. <code>\x1b[0m</code> is used to reset these settings, making sure that only the current cell is colored differently.</p>
<h2>
  <a name="uncovering-the-field" href="#uncovering-the-field"><br />
  </a><br />
  Uncovering the field<br />
</h2>
<p>This one will be even trickier. The game rule says that every empty field with no adjacent mines should be uncovered. This can result in any possible shape, really. Such as circles, for example. We would therefore need to find a way around those.</p>
<p>Ideally, the uncovering would kind of &#8220;spread&#8221; around. And a field would first uncover itself and then ask its neighbour to uncover if it could. Sounds like recursion, right?</p>
<p>It absolutely does! This little function does exactly what we want it to do by recursively asking its neighbours to uncover:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">const</span> <span class="nx">uncoverCoords</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// Uncover the field by default</span>
  <span class="nx">uncoveredField</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>

  <span class="kd">const</span> <span class="nx">neighbours</span> <span class="o">=</span> <span class="nx">getNeighbouringCoords</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span>

  <span class="c1">// Only if the field is a 0, so if it has no adjacent mines,</span>
  <span class="c1">// ask its neighbours to uncover.</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">field</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">neighbours</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(([</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// Only uncover fields that have not yet been uncovered.</span>
      <span class="c1">// Otherwise we would end up with an infinite loop.</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">uncoveredField</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Recursive call.</span>
        <span class="nx">uncoverCoords</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Now, for the last part, we need&#8230;</p>
<h2>
  <a name="user-input" href="#user-input"><br />
  </a><br />
  User input<br />
</h2>
<p>Home stretch! Almost there. We can soon enjoy the little bomb emoji telling us that we&#8217;re unlucky for the <em><strong>thirteenth time in a row, why am I so goshdarn unlucky??</strong></em> </p>
<p>Let&#8217;s define the controls first: Navigating the cursor can be done via keyboard. A press on <code>enter</code> would trigger the uncovering, a press on <code>space</code> would place and remove a flag.</p>
<p>In order to know if we still accept keyboard input, we need to keep track if the user has won or lost the game. Also, we need to keep track of the cursor coordinates:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">let</span> <span class="nx">playerX</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">let</span> <span class="nx">playerY</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">let</span> <span class="nx">hasLost</span> <span class="o">=</span> <span class="kc">false</span>
<span class="kd">let</span> <span class="nx">hasWon</span> <span class="o">=</span> <span class="kc">false</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Then we render the field initially:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="nx">renderField</span><span class="p">(</span><span class="nx">playerX</span><span class="p">,</span> <span class="nx">playerY</span><span class="p">)</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>To get the users keyboard input, we can use Node&#8217;s built-in <code>readline</code> module. <code>readline</code> allows us to &#8220;convert&#8221; key stroke events to events on <code>process.stdin</code>. We then listen to the standard input&#8217;s key stroke events (that&#8217;s usually done when using &#8220;raw mode&#8221;) and react to those:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="kd">const</span> <span class="nx">readlineModule</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">readline</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">readlineModule</span><span class="p">.</span><span class="nx">emitKeypressEvents</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">)</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">setRawMode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>

<span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">keypress</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">character</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// Do stuff</span>
<span class="p">})</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><em>However</em>, since the standard input is in raw mode, Ctrl+C to terminate the current script doesn&#8217;t work. Holding Ctrl and pressing C is also considered a key stroke. We therefore need our own implementation of that:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="c1">// ...</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">keypress</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">character</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// More stuff</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">key</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>The <code>key</code> object tells us the name of the key pressed in lower case and has flags for if Ctrl or Shift have been pressed.</p>
<p>Now, let&#8217;s add all of the arrow keys, space bar and enter inputs:</p>
<div class="highlight js-code-highlight">
<pre class="highlight javascript"><code><span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">keypress</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">character</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">hasLost</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">hasWon</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do not move past right wall</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">right</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">playerX</span> <span class="o">&lt;</span> <span class="nx">width</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">playerX</span><span class="o">++</span>
    <span class="p">}</span>

    <span class="c1">// Do not move past left wall</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">left</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">playerX</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">playerX</span><span class="o">--</span>
    <span class="p">}</span>

    <span class="c1">// Do not move past down wall</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">down</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">playerY</span> <span class="o">&lt;</span> <span class="nx">height</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">playerY</span><span class="o">++</span>
    <span class="p">}</span>

    <span class="c1">// Do not move past up wall</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">up</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">playerY</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">playerY</span><span class="o">--</span>
    <span class="p">}</span>

    <span class="c1">// Uncovering fields</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">return</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">uncoverCoords</span><span class="p">(</span><span class="nx">playerX</span><span class="p">,</span> <span class="nx">playerY</span><span class="p">)</span>

      <span class="c1">// The player seems to have found a mine</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">field</span><span class="p">[</span><span class="nx">playerY</span><span class="p">][</span><span class="nx">playerX</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">m</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">hasLost</span> <span class="o">=</span> <span class="kc">true</span>

        <span class="c1">// Uncover all fields in case the player has lost</span>
        <span class="nx">uncoveredField</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">height</span><span class="p">).</span><span class="nx">fill</span><span class="p">([]).</span><span class="nx">map</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">width</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="kc">true</span><span class="p">))</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Placing a flag</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">space</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">flaggedField</span><span class="p">[</span><span class="nx">playerY</span><span class="p">][</span><span class="nx">playerX</span><span class="p">]</span> <span class="o">=</span> <span class="o">!</span><span class="nx">flaggedField</span><span class="p">[</span><span class="nx">playerY</span><span class="p">][</span><span class="nx">playerX</span><span class="p">]</span>

      <span class="nx">hasWon</span> <span class="o">=</span> <span class="nx">checkIfWon</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// Show the player what just happened on the field</span>
  <span class="nx">renderField</span><span class="p">(</span><span class="nx">playerX</span><span class="p">,</span> <span class="nx">playerY</span><span class="p">)</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">hasLost</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Lost :(</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">hasWon</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Won :)</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">key</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Aaaand we&#8217;re done!</p>
<h2>
  <a name="i-wanna-play-too" href="#i-wanna-play-too"><br />
  </a><br />
  I wanna play, too!<br />
</h2>
<p>You can, actually! I made it open source:</p>
<div class="ltag-github-readme-tag">
<div class="readme-overview">
<h3>
      Minesweeper, but on the CLI!<br />
    </h3>
</p></div>
<div class="ltag-github-body">
<div id="readme" class="md" data-path="README.md">
<article class="markdown-body entry-content container-lg" itemprop="text">
<p dir="auto">A simple emoji based Minesweeper clone, playable on the CLI!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/thormeier/minesweeper.js/main/minesweeper.png"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_w36Njb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thormeier/minesweeper.js/main/minesweeper.png" alt="A screenshot of the Minesweeper.js CLI" style="max-width: 100%;" loading="lazy"/></a></p>
<h2 dir="auto">
Usage</h2>
<p dir="auto">Download by cloning this repository, start it by running <code>node minesweeper.js</code> or executing <code>npx minesweeper-cli.js</code></p>
<h2 dir="auto">
Arguments</h2>
<ul dir="auto">
<li>
<code>--width=number</code> &#8211; Width of the field, defaults to <code>8</code>
</li>
<li>
<code>--height=number</code> &#8211; Height of the field, defaults to <code>8</code>
</li>
<li>
<code>--mines=number</code> &#8211; Number of mines to place on the board, defaults to <code>10</code>
</li>
</ul>
<h2 dir="auto">
Detailed explanation</h2>
<p dir="auto">See my post over on <code>dev.to/thormeier</code>!</p>
<h2 dir="auto">
License</h2>
<p dir="auto">MIT</p>
</article>
</div></div>
</div>
<p>You can also play by executing <code>npx minesweeper-cli.js</code></p>
<p>Enjoy!</p>
<hr/>
<p><em>I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a</em> <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2764.png" alt="❤" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <em>or a</em> <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f984.png" alt="🦄" class="wp-smiley" style="height: 1em; max-height: 1em;" /><em>! I write tech articles in my free time and like to drink coffee every once in a while.</em></p>
<p><em>If you want to support my efforts,</em> <a href="http://buymeacoffee.com/pthormeier"><em>you can offer me a coffee</em> <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2615.png" alt="☕" class="wp-smiley" style="height: 1em; max-height: 1em;" /></a> <em>or</em> <a href="https://twitter.com/pthormeier"><em>follow me on Twitter</em> <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f426.png" alt="🐦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></a><em>!</em> <em>You can also support me directly via <a href="https://www.paypal.me/pthormeier">Paypal</a>!</em></p>
<p><a href="http://buymeacoffee.com/pthormeier"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button" loading="lazy" width="262" height="60"/></a></p>
</p></div>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br />
<br /></p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../lets-have-a-blast-of-fun-how-to-build-a-minesweeper-clone-for-the-cli-with-nodejs-%f0%9f%92%a3%f0%9f%94%8d/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Full bleed layout using CSS Grids</title>
		<link>./../../../full-bleed-layout-using-css-grids/index.html</link>
					<comments>./../../../full-bleed-layout-using-css-grids/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 06:57:33 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../full-bleed-layout-using-css-grids/index.html</guid>

					<description><![CDATA[Hi, I am trying to create a single-column layout which is centered on the page, has a max-width on it, and also has an image inside of it which breaks out of this column and spans the entire width of the page. And I wanted to see if I could do it without using a &#8230;<p class="read-more"> <a class="" href="./../../../full-bleed-layout-using-css-grids/index.html"> <span class="screen-reader-text">Full bleed layout using CSS Grids</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p><br />
<img src="https://external-preview.redd.it/_tscb4s5SFGU2cksH3HtZjaxgA7WkD7urQMPVTB_zaM.jpg?auto=webp&amp;s=98baf6b70f78ea41e98499f0df0ee2fbd80cf6ca" /></p>
<p>Hi, I am trying to create a single-column layout which is centered on  the page, has a max-width on it, and also has an image inside of it  which breaks out of this column and spans the entire width of the  page.  And I wanted to see if I could do it without using a [three-column grid](https://www.joshwcomeau.com/css/full-bleed/#the-solution), which seems to be the standard way to go about doing this sort of thing. </p>
<p> So here is my code: </p>
<p>    &lt;!DOCTYPE html&gt;<br />
    &lt;html lang=&#8221;en&#8221;&gt;<br />
        &lt;head&gt;<br />
            &lt;meta charset=&#8221;UTF-8&#8243; /&gt;<br />
            &lt;meta http-equiv=&#8221;X-UA-Compatible&#8221; content=&#8221;IE=edge&#8221; /&gt;<br />
            &lt;meta name=&#8221;viewport&#8221; content=&#8221;width=device-width, initial-scale=1.0&#8243; /&gt;<br />
            &lt;title&gt;Full bleed&lt;/title&gt;<br />
            &lt;style&gt;<br />
                * {<br />
                    box-sizing: border-box;<br />
                    margin: 0;<br />
                }<br />
                body {<br />
                    display: grid;<br />
                    row-gap: 20px;<br />
                    margin: 0;<br />
                    place-items: center;<br />
                }<br />
                body &gt; * {<br />
                    padding: 30px;<br />
                    background-color: #ececec;<br />
                }<br />
                body &gt; :not(.full-bleed) {<br />
                    width: min(100%, 1200px);<br />
                }<br />
                .full-bleed {<br />
                    padding: 0;<br />
                    width: 100%;<br />
                }<br />
                header {<br />
                    display: flex;<br />
                    justify-content: space-between;<br />
                    align-items: center;<br />
                }<br />
                nav ul {<br />
                    list-style-type: none;<br />
                    display: flex;<br />
                    gap: 20px;<br />
                }<br />
                main &gt; p + p {<br />
                    margin-top: 20px;<br />
                }<br />
            &lt;/style&gt;<br />
        &lt;/head&gt;<br />
        &lt;body&gt;<br />
            &lt;header&gt;<br />
                &lt;span&gt;Logo&lt;/span&gt;<br />
                &lt;nav&gt;<br />
                    &lt;ul&gt;<br />
                        &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;Home&lt;/a&gt;&lt;/li&gt;<br />
                        &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;About&lt;/a&gt;&lt;/li&gt;<br />
                        &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;Contact&lt;/a&gt;&lt;/li&gt;<br />
                    &lt;/ul&gt;<br />
                &lt;/nav&gt;<br />
            &lt;/header&gt;</p>
<p>            &lt;img class=&#8221;full-bleed&#8221; src=&#8221;https://source.unsplash.com/random/1920&#215;500&#8243; alt=&#8221;&#8221; /&gt;</p>
<p>            &lt;main&gt;<br />
                &lt;p&gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Illum architecto temporibus porro quos enim odit aliquid voluptatibus, laborum, dolorum minus totam ab impedit maiores harum quae fuga numquam sunt accusamus.&lt;/p&gt;</p>
<p>                &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus velit vero explicabo expedita. Provident similique, vero doloremque illum perspiciatis, quasi quis facere, adipisci obcaecati ab quisquam alias id quaerat maiores!&lt;/p&gt;<br />
            &lt;/main&gt;</p>
<p>            &lt;footer&gt;Footer&lt;/footer&gt;<br />
        &lt;/body&gt;<br />
    &lt;/html&gt;</p>
<p> This seems like a more simple, straightforward solution to me. </p>
<p>I think it also solves part of the problem that [Chris Coyier](https://css-tricks.com/full-bleed/)  was talking about when using the three-column grid approach in that the  grid items need to be manually placed on the grid instead of it being naturally stacked on top of each other. </p>
<p> Here is a quote from that article: </p>
<p>&gt;You have to apply the default behavior you want to every single element.  Rather than elements naturally stacking on top of each other, you have  to select them and tell them where to go and let them stack themselves.  Feels a little less like just going with the web’s grain. Then you still  need a utility class to do the full bleed behavior. </p>
<p> So what do you think?</p>

]]></content:encoded>
					
					<wfw:commentRss>./../../../full-bleed-layout-using-css-grids/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>What and how did you better/automate your company&#8217;s operations/processes?</title>
		<link>./../../../what-and-how-did-you-better-automate-your-companys-operations-processes/index.html</link>
					<comments>./../../../what-and-how-did-you-better-automate-your-companys-operations-processes/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 06:55:31 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../what-and-how-did-you-better-automate-your-companys-operations-processes/index.html</guid>

					<description><![CDATA[Hi, I&#8217;m very curious to know if you ever did something better to your company&#8217;s operations/processes or something you automated? I feel like there are lots of repetitive tasks involved so if you ever helped to improve something, please share. Let me start, I created an organization-wide GitHub bot that does a lot of stuff &#8230;<p class="read-more"> <a class="" href="./../../../what-and-how-did-you-better-automate-your-companys-operations-processes/index.html"> <span class="screen-reader-text">What and how did you better/automate your company&#8217;s operations/processes?</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[
<p>Hi,</p>
<p>I&#8217;m very curious to know if you ever did something better to your company&#8217;s operations/processes or something you automated? I feel like there are lots of repetitive tasks involved so if you ever helped to improve something, please share.</p>
<p>Let me start, I created an organization-wide GitHub bot that does a lot of stuff for us like sending slack notifications when the build fails.</p>
<p>Thanks.</p>

]]></content:encoded>
					
					<wfw:commentRss>./../../../what-and-how-did-you-better-automate-your-companys-operations-processes/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Card Flip &#8211; DEV Community</title>
		<link>./../../../the-card-flip-dev-community/index.html</link>
					<comments>./../../../the-card-flip-dev-community/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 06:55:27 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../the-card-flip-dev-community/index.html</guid>

					<description><![CDATA[I recently just finished my first project, which is a simple video-game library with a quick and easy rating system. This site allows for users to either add their own recently played games to the library and receive feedback from others. If they do not feel like participating in the addition of a game they &#8230;<p class="read-more"> <a class="" href="./../../../the-card-flip-dev-community/index.html"> <span class="screen-reader-text">The Card Flip &#8211; DEV Community</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p> <br />
</p>
<div data-article-id="1017853" id="article-body">
<p>I recently just finished my first project, which is a simple video-game library with a quick and easy rating system. This site allows for users to either add their own recently played games  to the library and receive feedback from others. If they do not feel like participating in the addition of a game they can always use the application to see what is the most popular game<br />and the general consensus around this game. </p>
<p>While creating this web application, I found myself dealing with a majority innerHTML and scope. This was due to the function that I wanted for the front of the game cards. I wanted the front of the game cards to only show the image that was added with a button. This button then flips the card allowing for the the rest of the information of the card to show.</p>
<p><a href="https://i.giphy.com/media/yeNqGMU6tjiswoVE3O/giphy.gif" class="article-body-image-wrapper"><img src="https://i.giphy.com/media/yeNqGMU6tjiswoVE3O/giphy.gif" loading="lazy" width="480" height="270" data-animated="true"/></a></p>
<p>Getting the card to this format did take a lot of work and getting familiar with how innerHTML works within the scope. This ultimately came down to creating one function with  2 more functions nested within.<code>renderGame(game)</code>,<code>function backCard()</code> and <code>function createCardButton()</code></p>
<p>The <code>renderGame(game)</code> function is the main function that allows for my code to take in the information and post it to the JSON an then allowing for the cards to render on the DOM.</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>function renderGame(game){
    let frontGameCard = document.createElement('div')
    const frontHTML = `
      &lt;div class = "container"&gt;
      &lt;img class = "gamePic" src="https://dev.to/kale_leach/${game.imgurl}"/&gt;
      &lt;button id = "btn_${game.id}" class="btn"&gt; ${game.name} &lt;/button&gt;
      &lt;/div &gt;`
      frontGameCard.className="front_card"
      frontGameCard.id = `card_${game.id}`
      frontGameCard.innerHTML = frontHTML

        contClass.appendChild(frontGameCard)
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>This inforamtion is gathered from an earlier function that calls on render game. This information then is taken and added to our <code>createCardButton()</code>. This function allows for each card to have its own function button that allows for users to click on each card. The main issue that I ran into here was that if the cards had all the same ID with a <code>.document.querySelector(#x)</code> only the first button would have functionality, leaving the rest  useless. To bypass this issue I had to set the ID of the cards to <code>btn_${game.id}</code>. This gave each card their own unique ID allowing for each button to work separately.</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>function backCard(){
    frontGameCard.innerHTML = 
      `&lt;div class = "container"&gt;
      &lt;div class="column"&gt;
      &lt;h2&gt; ${game.name} &lt;/h2&gt;
      &lt;p&gt; ${game.description} &lt;/p&gt;
      &lt;div id = 'sys_price' class="grid"&gt;
      &lt;p&gt; System &lt;/p&gt;
      &lt;p&gt; Price &lt;/p&gt;
      &lt;p&gt; ${game.systems}&lt;/p&gt;
      &lt;p&gt; $${game.price}&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="grid"&gt;
      &lt;p&gt; &lt;span id = 'num-of-must'&gt; ${game.must_play} &lt;/span&gt;&lt;/p&gt; 
      &lt;p&gt; &lt;span id = 'num-of-play'&gt; ${game.play} &lt;/span&gt;&lt;/p&gt;
      &lt;p&gt; &lt;span id = 'num-of-return'&gt; ${game.return} &lt;/span&gt;&lt;/p&gt; 
      &lt;button class="Must_Button"&gt; Must Play &lt;/button&gt; 
      &lt;button class="Play_Button"&gt; Play &lt;/button&gt; 
      &lt;button class="Return_Button"&gt; Return &lt;/button&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;button class = back_btn&gt; Back &lt;/button&gt;
      &lt;/div"&gt;` 
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>This then led me to my second nested function <code>function backCard()</code> which when the button on X&#8217;s card was clicked it would replace the image of the card with rest of the information. This is where I dealt with a majority of the scope issues. At first I tried creating the function outside of the <code>renderGame(game)</code> function but quickly learned that in order for this function to use any of the information required to be built, it had to be inside of <code>renderGame(game)</code>. This function responds to the click <code>cardButton.addEventListener('click', backCard)}</code> changing the innerHTML from the function scope of <code>renderGame(game)</code>. The final capability of my cards that was required so the application could keep its aesthetic was a back button. This allowed for the user to flip that card back over and stay on their search for their next game.</p>
</p></div>

]]></content:encoded>
					
					<wfw:commentRss>./../../../the-card-flip-dev-community/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>What is Web1, Web2, and Web3?</title>
		<link>./../../../what-is-web1-web2-and-web3/index.html</link>
					<comments>./../../../what-is-web1-web2-and-web3/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 06:55:23 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../what-is-web1-web2-and-web3/index.html</guid>

					<description><![CDATA[What is HTML All The Things HTML All The Things is a web development podcast and discord community which was started by Matt and Mike, developers based in Ontario, Canada. The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their &#8230;<p class="read-more"> <a class="" href="./../../../what-is-web1-web2-and-web3/index.html"> <span class="screen-reader-text">What is Web1, Web2, and Web3?</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p> <br />
</p>
<div data-article-id="1017995" id="article-body">
<p><iframe src="https://open.spotify.com/embed/episode/7cXromN3ucvW2cT9ye9OZ1" width="100%" height="232px" frameborder="0" scrolling="no" allowtransparency="true" allow="encrypted-media" loading="lazy"><br />
</iframe>
</p>
<h2>
  <a name="what-is-html-all-the-things" href="#what-is-html-all-the-things"><br />
  </a><br />
  What is HTML All The Things<br />
</h2>
<p>HTML All The Things is a <a href="https://www.htmlallthethings.com/">web development podcast</a> and <a href="https://discord.com/invite/jweMCx9">discord community</a> which was started by Matt and Mike, developers based in Ontario, Canada. </p>
<p>The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.</p>
<h2>
  <a name="whats-this-one-about" href="#whats-this-one-about"><br />
  </a><br />
  What&#8217;s This One About?<br />
</h2>
<p>Web 1.0, Web 2.0, and Web 3.0 represent different eras of how people used the internet. Web1 mostly offered users the ability to read and research, with hardly any way to interact with what they were reading. Web2 got people involved with interactivity and connectivity as ever more power web apps and social media platforms changed how we worked and socialized online. Web3 is the third iteration of the internet that is not quite in full swing yet, but is bringing with it the likes of crypto currencies, artificial intelligence, the metaverse, NFTs, and much more.</p>
<h2>
  <a name="show-notes" href="#show-notes"><br />
  </a><br />
  Show Notes<br />
</h2>
<ul>
<li>What is Web 1?
</li>
<li>What is Web2?
</li>
<li>What is Web3?</li>
</ul>
<h2>
  <a name="resources" href="#resources"><br />
  </a><br />
  Resources<br />
</h2>
<h2>
  <a name="thank-you" href="#thank-you"><br />
  </a><br />
  Thank you!<br />
</h2>
<p>If you&#8217;re enjoying the podcast consider giving us a review on <a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136">Apple Podcasts</a> or checking out our Patreon to get a shoutout on the podcast. </p>
<p><strong><a href="https://www.patreon.com/htmlallthethings">Support us on Patreon</a></strong></p>
<p>You can find us on all the podcast platforms out there as well as</p>
<p><a href="https://www.instagram.com/htmlallthethings/">Instagram (@htmlallthethings)</a><br /><a href="https://twitter.com/htmleverything">Twitter (@htmleverything)</a><br /><a href="https://www.tiktok.com/@htmlallthethings">TikTok (Html All The Things)</a></p>
</p></div>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><script async defer src="https://platform.instagram.com/en_US/embeds.js"></script><br />
<br /></p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../what-is-web1-web2-and-web3/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>SuiteCRM installation in Ubuntu Server 20.04.4 LTS VPS [2022 Guide]</title>
		<link>./../../../suitecrm-installation-in-ubuntu-server-20-04-4-lts-vps-2022-guide-2/index.html</link>
					<comments>./../../../suitecrm-installation-in-ubuntu-server-20-04-4-lts-vps-2022-guide-2/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 06:55:22 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../suitecrm-installation-in-ubuntu-server-20-04-4-lts-vps-2022-guide-2/index.html</guid>

					<description><![CDATA[SuiteCRM is an open-source Customer Relationship Management (CRM) software solution. An application which loads the sales, markets, and services administration of a company. It also helps to organize all the processes concerning these activities translating this into process improvements and time-saving. Learn how to install SuiteCRM on Ubuntu 20.04 here Note: If can&#8217;t follow along &#8230;<p class="read-more"> <a class="" href="./../../../suitecrm-installation-in-ubuntu-server-20-04-4-lts-vps-2022-guide-2/index.html"> <span class="screen-reader-text">SuiteCRM installation in Ubuntu Server 20.04.4 LTS VPS [2022 Guide]</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p> <br />
</p>
<div data-article-id="1017330" id="article-body">
<p><strong>SuiteCRM</strong> is an open-source Customer Relationship Management (CRM) software solution. An application which loads the sales, markets, and services administration of a company. It also helps to organize all the processes concerning these activities translating this into process improvements and time-saving. Learn how to install SuiteCRM on Ubuntu 20.04 here</p>
<blockquote>
<p>Note: If can&#8217;t follow along this process, feel free to reach out to me! (Social media links are attached Below)</p>
</blockquote>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPAbkoIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0co87h3gh5fsbvgk1pk2.jpg" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPAbkoIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0co87h3gh5fsbvgk1pk2.jpg" alt="Image description" loading="lazy" width="880" height="558"/></a></p>
<h2>
  <a name="prerequisites" href="#prerequisites"><br />
  </a><br />
  Prerequisites<br />
</h2>
<ul>
<li>SSH root access or a regular system user (use sudo) with sudo privileges</li>
<li>Fully-updated system. </li>
</ul>
<h2>
  <a name="install-apache-webserver" href="#install-apache-webserver"><br />
  </a><br />
  Install Apache Webserver<br />
</h2>
<p>Install Apache server using this command<br /><code>apt install apache2</code></p>
<p>Use These command with SUID permissions to start, enable and  restart the apache2 server<br /><code>systemctl start apache2<br />systemctl enable apache2<br />systemctl restart apache2</code></p>
<p>Go to browser and type server IP or LocalHost, you should be able to view Apache2 Ubuntu Default Page</p>
<h2>
  <a name="install-php-composer-amp-extenstions" href="#install-php-composer-amp-extenstions"><br />
  </a><br />
  Install PHP, Composer &amp; extenstions<br />
</h2>
<p>To install PHP, composer(package manager for PHP) and the required PHP extensions, run the following command:<br /><code>sudo apt install php composer php-cli php-imagick php-fpm php-mysql php-common php-gd php-imap php-json php-curl php-zip php-xml php-mbstring php-bz2 php-intl php-gmp php-curl php-gd php-zip php-imap php-dom php-intl php-opache php-soap</code></p>
<h2>
  <a name="install-and-create-database-on-mysql-server" href="#install-and-create-database-on-mysql-server"><br />
  </a><br />
  Install and create database on MySQL server<br />
</h2>
<p>Install MySQL server<br /><code>apt install mysql-server</code></p>
<p>Log In to MySQL server and provide password with following command:<br /><code>mysql -u root -p</code></p>
<p>Create a Database for suitecrm using these commands<br /><code>CREATE DATABASE suitecrm;<br />CREATE USER 'suitecrm'@'localhost' IDENTIFIED BY 'password';<br />GRANT ALL PRIVILEGES ON suitecrm.* TO 'suitecrm'@'localhost';<br />FLUSH PRIVILEGES;<br />EXIT;</code></p>
<h2>
  <a name="download-suitecrm-on-ubuntu-2004-and-configure-it" href="#download-suitecrm-on-ubuntu-2004-and-configure-it"><br />
  </a><br />
  Download SuiteCRM on Ubuntu 20.04 and Configure it<br />
</h2>
<p>Download the latest stable version by executing the following command on your server.<br /><code>wget https://github.com/salesagility/SuiteCRM/archive/refs/tags/v7.12.5.zip</code></p>
<p>Unzip to default directory or subdomain directory<br /><code>unzip SuiteCRM-8.0.3.zip -d /var/www/html/suitecrm</code></p>
<p>CD to suitecrm directory Add sub tree to folder<br /><code>cd /var/www/suitecrm<br />mkdir cache<br />mkdir vendor<br />touch config_override.php</code></p>
<p>Set correct permissions to Files and Folders:<br /><code>chown -R www-data:www-data /var/www/suitecrm/<br />chmod -R 755 .<br />chmod -R 775 cache custom modules themes data upload</code></p>
<p>Install composer packages with this command:<br /><code>composer install</code></p>
<h2>
  <a name="add-sitesavailable-in-apache-configurations" href="#add-sitesavailable-in-apache-configurations"><br />
  </a><br />
  Add sites-available in apache configurations<br />
</h2>
<p>Open nano editor using this command:<br /><code>nano /etc/apache2/sites-available/suitecrm.conf</code></p>
<p>Add this text into config file</p>
<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>&lt;VirtualHost *:80&gt;
  ServerName suitecrm.example.com
  DocumentRoot /var/www/suitecrm/

  ErrorLog ${APACHE_LOG_DIR}/suitecrm_error.log
  CustomLog ${APACHE_LOG_DIR}/suitecrm_access.log combined

  &lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride All
  &lt;/Directory&gt;

  &lt;Directory /var/www/suitecrm/&gt;
    Options FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    allow from all
  &lt;/Directory&gt;

Include /etc/apache2/conf-available/php7.4-fpm.conf

&lt;/VirtualHost&gt;
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Increase Upload Limit in php configurations</p>
<p><code>sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 20M/g' /etc/php/7.4/fpm/php.ini<br />systemctl restart php7.4-fpm</code></p>
<p>Now enable suitecrm site:<br /><code>a2ensite suitecrm.conf</code></p>
<p>Restart apache server and you are done with CLI<br /><code>systemctl restart apache2</code></p>
<h2>
  <a name="fire-up-your-web-browser-to-localhost" href="#fire-up-your-web-browser-to-localhost"><br />
  </a><br />
  Fire up your web browser to localhost<br />
</h2>
<blockquote>
<p>You should add subdomain to /etc/hosts if any.</p>
</blockquote>
<ul>
<li>Accept terms and continue to installation</li>
<li>Login with database user and pass <a href="https://example.com/">suitecrm:password</a>
</li>
<li>Create admin user for suitecrm login page.</li>
</ul>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0RC3j6fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nkgfanmsyr2okcjwfw5.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0RC3j6fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nkgfanmsyr2okcjwfw5.png" alt="Image description" loading="lazy" width="880" height="520"/></a></p>
<ul>
<li>Login to admin account it will redirect you to dashboard</li>
</ul>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECtc0EoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyl1a28n46jcq25jqldb.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECtc0EoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyl1a28n46jcq25jqldb.png" alt="SuiteCRM admin Page" loading="lazy" width="880" height="560"/></a></p>
<p>As you can see suitecrm is successfully installed in our Ubuntu Server or VPS</p>
<h2>
  <a name="wrapping-up" href="#wrapping-up"><br />
  </a><br />
  Wrapping Up<br />
</h2>
<p>I hope this tutorial helped you install SuiteCRM on Ubuntu 20.04. You can also check out SuiteCRM  user manual to learn how to use it. If you found this post useful, then you can follow me on other social media platform to get more tips and tricks. Take care <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
</p></div>

]]></content:encoded>
					
					<wfw:commentRss>./../../../suitecrm-installation-in-ubuntu-server-20-04-4-lts-vps-2022-guide-2/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Mastering CSS Margin Collapse With Practical Examples</title>
		<link>./../../../mastering-css-margin-collapse-with-practical-examples/index.html</link>
					<comments>./../../../mastering-css-margin-collapse-with-practical-examples/index.html#respond</comments>
		
		<dc:creator><![CDATA[Connected]]></dc:creator>
		<pubDate>Thu, 10 Mar 2022 06:55:18 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../mastering-css-margin-collapse-with-practical-examples/index.html</guid>

					<description><![CDATA[Margin collapse is an interesting concept in CSS margins that you should know, understand and be conscious of. It is the process where you apply a margin of 10px on top, the bottom of an element, apply another 10px on top, the bottom of the next element, and end up having a 10px space between &#8230;<p class="read-more"> <a class="" href="./../../../mastering-css-margin-collapse-with-practical-examples/index.html"> <span class="screen-reader-text">Mastering CSS Margin Collapse With Practical Examples</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[<p> <br />
</p>
<div data-article-id="1017066" id="article-body">
<p>Margin collapse is an interesting concept in CSS margins that you should know, understand and be conscious of. It is the process where you apply a margin of 10px on top, the bottom of an element, apply another 10px on top, the bottom of the next element, and end up having a 10px space between the two-element instead of 20px.</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/NWwobZr?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>The space between <code>p</code> elements above is supposed to be 20px because 10+10=20 right? But then it&#8217;s 10px. Why? How? This is margin collapse and in this article, I want to show you why, how, and help you master it in less than 7 minutes.</p>
<details>
<summary>A good way to visualize the code examples in this article (like this one above) is to open op your devTools and inspect the elements (i.e p), hover over the element and the margins of the elements will pop up in a light orange color. Let&#8217;s experiment with the example above:</summary>
<ol>
<li>
<p>Open up your web dev tools</p>
</li>
<li>
<p>Click on the &#8220;arrow&#8221; icon at the top right of the dev tools or simply type <code>ctrl+shift+c</code></p>
</li>
<li>
<p>Click on any of the <code>p</code> elements in the document, try clicking &#8220;Hello World&#8221;</p>
</li>
<li>
<p>In the element&#8217;s dev tools section, hover over the element, and a light orange color will pop up; that is the margin</p>
</li>
<li>
<p>Hover over the other p element, and the same thing will happen, but you&#8217;d notice that it seems like the light orange color of the first element you hovered on is at the same position of the second; this is the effect of margin collapsing.</p>
</li>
</ol>
<p>Use this method to go over the examples that will be used in this article. </p>
</details>
<p>First, let&#8217;s make a quick recap of what margins are and their usefulness. Margin is an important aspect of styling elements in CSS, it allows us to add spaces between elements, or as some might say gives breathing room to the element applied. Apart from the margin, there is also another guy in the <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model">box model</a> padding that does the same thing as margin. But they are different and should be applied differently</p>
<h2>
  <a name="margin-vs-padding" href="#margin-vs-padding"><br />
  </a><br />
  Margin vs Padding<br />
</h2>
<p>One key difference is that <strong>Margin</strong> was designed for creating spaces between sibling elements whereas <strong>Padding</strong> was designed for creating spaces between a child and parent element. Understanding this changes everything.</p>
<p>It is not that margins cannot be used to create spaces between a child and parent element (you may have probably done that) but you would have unexpected issues when margins start collapsing. Here is one of these issues</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/qBVzqKZ?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>Now that we have that setup, let&#8217;s try to increase the space between the <code>h1</code> element and the <code>.box</code> element using the <code>margin-top</code> property. Change the value from <code>0</code> to <code>20px</code> and see what happens.</p>
<p>Now it looks like we&#8217;re pushing down the whole of the <code>.box</code> element, and we still don&#8217;t see the space between the <code>h1</code> and <code>.box</code> elements. Try increasing it from <code>20px</code> to <code>200px</code>. Still no spaces? How? This is what happens when you use margin for creating spaces between a parent and a child element, they collapse, and then the purpose of margin is actualized between the <code>.empty</code> and <code>.box</code> elements. I will explain later.</p>
<p>One other difference that will also be useful in the course of this article is the order of the box model. In the box model, we have in ascending order</p>
<ol>
<li>the height and width of the element</li>
<li>the padding</li>
<li>the border</li>
<li>the margin</li>
</ol>
<p>This is one other thing that makes creating spaces between a child and parent element is more suitable with padding. Borders are the limit of an element, if you want to create a space between a child and parent element, whether you want to apply a border or not (to the parent element now) you should respect the border limit and create spaces between the border limits. And the only guy you can use to create spaces within the border limits is padding, not margin.</p>
<p>Think of it this way, every country in the world has</p>
<ol>
<li>the residential areas (height and width of element)</li>
<li>the spaces between residential areas and the border of the country (passing)</li>
<li>the border of the country (border)</li>
<li>and the spaces between the border of country A and border of country B (margin) &#8211; this can be 0 in some cases like North Korea and South Korea.</li>
</ol>
<p>So if a leader of country A wants to create more spaces between his/her country&#8217;s residential areas and country B, the solution is not to increase the margin &#8211; because that may lead to a world war rather the solution is to increase the padding. As such country B will have no business with the leader because he/she is respecting its country&#8217;s border limits.</p>
<p>So try to hold on to the order of the box model, I will come back to it later.</p>
<p>So now that we&#8217;ve gone through what margins are, let&#8217;s jump right into margin collapse.</p>
<h2>
  <a name="margin-collapse" href="#margin-collapse"><br />
  </a><br />
  Margin Collapse<br />
</h2>
<p>Margin collapse happens when element A&#8217;s margin overlaps element B&#8217;s margin or vice versa based on <a href="https://www.joshwcomeau.com/css/rules-of-margin-collapse/">some conditions or rules</a>. Just two years ago we were all asked to maintain social distancing by maintaining a 6ft gap between you and every other person. Now what this means is that one person should have a 6ft margin around him/her.</p>
<p>If John, for example, meets with Doe for a talk, though they have a 6ft personal space it doesn&#8217;t mean that they must have a 12ft gap as per the social distancing. Social distancing says at least 6ft, so they can easily overlap their personal space to maintain a 6ft gap. This way I believe they can hear each other well enough.</p>
<p>This is the way margin collapse works, it lets us establish the necessary amount of space between two elements. So now as a CSS developer, our role is to understand when we need our margins to collapse, when we should expect our margins to collapse, and when we shouldn&#8217;t expect our margins to collapse.</p>
<p>It&#8217;s not as easy as &#8220;Oh cool, all margins collapse, really cool.&#8221; No, not at all, there are times when margins don&#8217;t collapse. So we might just expect two margins to collapse and give us <code>10px</code>, and all of a sudden we get <code>20px</code>. On the bright side, we can know when margins will and will not collapse.</p>
<p>As such it won&#8217;t be a matter of trial and error, but we&#8217;d be sure if it will collapse or not. There are some conditions/rules that margins rely on before they can collapse. We will quickly go over these conditions as</p>
<h3>
  <a name="when-do-margins-collapse" href="#when-do-margins-collapse"><br />
  </a><br />
  When Do Margins Collapse<br />
</h3>
<h4>
  <a name="1-when-vertical" href="#1-when-vertical"><br />
  </a><br />
  1. When Vertical<br />
</h4>
<p>Only vertical margins collapse. The left and right margins of the two horizontal elements will not collapse.</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/QWOXGXo?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>You&#8217;d notice that the margins between the <code>li</code> elements are 20px each, vertically this would not happen, because it will collapse to give us 10px:</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/LYOKxpL?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p><strong>NOTE:</strong> You should note that when two margins collapse the bigger margin always wins, from the example above if we make the middle <code>li</code> to have a margin of 20px, we will end up with both the first and last <code>li</code> having a margin of 20px in the bottom and top respectively.</p>
<h4>
  <a name="2-when-the-parent-element-is-in-flow-layout" href="#2-when-the-parent-element-is-in-flow-layout"><br />
  </a><br />
  2. When the parent element is in flow layout<br />
</h4>
<p>Margins of nested elements whose parent is not in flow layout will not collapse. There are multiple layouts on the web, that is flow layout, grid layout, flex layout.</p>
<p>Just like from the example above, the parent element <code>ul</code> is in a flow layout, so the margins of the child elements will collapse. Even if the parent element is <code>body</code>, it will collapse because <code>body</code> is also in flow layout</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/NWwZdGJ?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>But this will not be the case if we set the parent element to <code>flex</code> or <code>grid</code>.</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/GRObroG?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>So basically from conditions 1 to 2, we&#8217;ve seen that only margins of block elements will collapse.</p>
<h4>
  <a name="3-when-an-element-is-not-absolutely-positioned-or-floating" href="#3-when-an-element-is-not-absolutely-positioned-or-floating"><br />
  </a><br />
  3. When an element is not absolutely positioned or floating<br />
</h4>
<p>When an element is absolutely positioned or floating, its margin will not collapse. It will also not collapse if the element is not fixed.</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/RwjzKaM?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>Also when an element is floating, margin collapse is disregarded</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/qBVzRNj?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<h4>
  <a name="4-when-siblings-are-adjacent-and-not-obstructed" href="#4-when-siblings-are-adjacent-and-not-obstructed"><br />
  </a><br />
  4. When siblings are adjacent and not obstructed<br />
</h4>
<p>So far we&#8217;ve been seeing sibling elements collapse or not collapse based on some predefined style on the parent or child element. But margins of two or more elements can be stopped from collapsing when there obstructing elements like <code>hr</code> or <code>br</code>.</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/gOXNgwd?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>Even the tiniest bit of height for an empty element can obstruct margin collapsing.</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/LYOKxbj?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>So the elements have to be adjacent (touching) for it to collapse.</p>
<h4>
  <a name="5-when-you-do-the-weird-thing" href="#5-when-you-do-the-weird-thing"><br />
  </a><br />
  5. When you do the weird thing<br />
</h4>
<p>I know you must be curious to find out what this weird thing is, well I already made mention of it earlier. The weird thing is using margin to create spaces between child and parent elements instead of padding. Now it is only weird to me, it can be totally fine with you as long as you know the maneuverings of it.</p>
<p>And yeah, that&#8217;s what am going to talk about here in this section, how to maneuver your way to using margins for creating spaces between child and parent elements without having the problem we had earlier. That is:</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/qBVzqKZ?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>We said if you increase the <code>margin-top</code> of the <code>h1</code> tag, rather than it creating a visible space between the parent and child element, it creates more space between the <code>.box</code> and <code>.empty</code> element. This is because the child element (<code>h1</code>) which has the margin, collapsed with the parent element&#8217; (<code>.box</code>) margin.</p>
<p>Think of it as the child element passing its margin to its parent element. But when it passes its margin to the parent element it doesn&#8217;t add to the parent element&#8217;s margin, rather it collapses it. By default, the <code>.box</code> element has a margin of 0 just like every other element, but if we increase it to <code>5px</code> and increase the child element&#8217;s <code>margin-top</code> to <code>10px</code>, the margin between <code>.empty</code> and <code>.box</code> would not be <code>15px</code> rather it would be <code>10px</code> &#8211; because the bigger margin wins when collapsing occurs right?</p>
<p>It&#8217;s not confusing, trust me. All we are saying here is that margins of nested elements can collapse with the margin of their parent element.</p>
<div class="highlight js-code-highlight">
<pre class="highlight html"><code><span class="nt">&lt;style&gt;</span>
  <span class="nc">.box</span> <span class="p">{</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">h1</span> <span class="p">{</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>I am not empty<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>Here is a visual illustration</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hLcYMqmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88r1qz00isc3af8s1u2l.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hLcYMqmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88r1qz00isc3af8s1u2l.png" alt="example10 illustration" loading="lazy" width="880" height="390"/></a></p>
<p>So no matter the margin you use for the child element, it is just going to collapse it with that of the parent and end up creating more space between the parent element and its sibling (if any). But some things can prevent this from happening</p>
<h5>
  <a name="padding" href="#padding"><br />
  </a><br />
  Padding<br />
</h5>
<p>When we add padding to the parent element we can hinder the margin of the child element from collapsing with that of the parent.</p>
<div class="highlight js-code-highlight">
<pre class="highlight html"><code><span class="nt">&lt;style&gt;</span>
  <span class="nc">.box</span> <span class="p">{</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
    <span class="nl">padding-top</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">h1</span> <span class="p">{</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>I am not empty<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gKJ-VJX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjx2lo6kww9p68wxsk6b.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKJ-VJX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjx2lo6kww9p68wxsk6b.png" alt="example11 illustration" loading="lazy" width="880" height="390"/></a></p>
<p>For the margin to not collapse the parent element should have padding that is in the same direction as the margin to collapse. This means if you change the <code>padding-top</code> to <code>padding-bottom</code> it will not stop the margins from collapsing because the padding is in the opposite direction.</p>
<p>So if you want to specifically hinder only the top of an element&#8217;s margin from collapsing with its child, you&#8217;d have to use the corresponding padding for it. Then, to hinder the all-around margin from not collapsing you just apply padding all-round.</p>
<div class="highlight js-code-highlight">
<pre class="highlight css"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">h1</span> <span class="p">{</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p>The size of the padding doesn&#8217;t really matter it could be as tiny as <code>1px</code>, it would still stop the margins from collapsing. You might ask &#8220;can&#8217;t we use padding on the child elements too?&#8221;, I will answer that in the next section.</p>
<h5>
  <a name="border" href="#border"><br />
  </a><br />
  Border<br />
</h5>
<p>Borders do the same thing as padding in this regard. Using any size of border on the parent element will prevent collapsing.</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/LYOKgGP?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>When we add another element to act as a sibling to <code>.box</code>, neither the padding nor border of <code>.box</code> will stop the margins from collapsing with the new element</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/mdqZzQM?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>This is because the padding and margin rule only applies to the nested elements of that element. Neither padding nor border can stop the margins of two sibling elements from collapsing simply because they don&#8217;t have the access to the margins of the element.</p>
<p>Recall that in the box model, we had padding, before border, and finally before margin. The only way padding or border can stop two margins from collapsing is if the padding or border is in between the two margins. And that only occurs between parent and child elements.</p>
<p>Here we have a parent element with a border, the border of this parent element is now above the margin of the child element, while still under the margin of the parent element. So already it&#8217;s in between the two margins, it won&#8217;t let them collapse. The illustration below will make it a little clearer.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-Cwb2ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0a74rio52a0o40uhi40.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-Cwb2ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0a74rio52a0o40uhi40.png" alt="margin collapse illustration" loading="lazy" width="880" height="390"/></a></p>
<p>This is not the case for sibling elements, because the border or padding of any of the elements is not superseding the margins of the other, this is the way it looks in sibling elements.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDnng9xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpepn84sugib7o1jajst.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDnng9xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpepn84sugib7o1jajst.png" alt="margin collapse illustration" loading="lazy" width="880" height="509"/></a></p>
<h5>
  <a name="gap" href="#gap"><br />
  </a><br />
  Gap<br />
</h5>
<p>One other thing that can cause the margin of a parent element from collapsing with that of its child is when there is a gap between them. This occurs when the height/width of the parent&#8217;s element is beyond that of its child.</p>
<div class="highlight js-code-highlight">
<pre class="highlight html"><code><span class="nt">&lt;style&gt;</span>
  <span class="nc">.box</span> <span class="p">{</span>
    <span class="nl">margin-right</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">400px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">h1</span> <span class="p">{</span>
    <span class="nl">margin-right</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">250px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>I am not empty<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on"><title>Enter fullscreen mode</title>
    <path d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"/>
</svg></p>
<p>    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-off"><title>Exit fullscreen mode</title>
    <path d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"/>
</svg></p>
</div>
</div>
</div>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6mEBH3tf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azvkwa9ppmhzuzsk4ygk.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mEBH3tf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azvkwa9ppmhzuzsk4ygk.png" alt="margin collapse illustration" loading="lazy" width="880" height="321"/></a></p>
<h4>
  <a name="6-negative-margins-can-collapse-too" href="#6-negative-margins-can-collapse-too"><br />
  </a><br />
  6. Negative margins can collapse too<br />
</h4>
<p>Alright, now let&#8217;s talk about negative margins. Two or more negative margins can collapse together. Just like we&#8217;ve seen with positive margins, the biggest negative margin is used over the smallest.</p>
<p><iframe height="600" src="https://codepen.io/elijah-trillionz/embed/PoOrxoe?height=600&amp;default-tab=html,css&amp;editable=true&amp;embed-version=2" scrolling="no" frameborder="no" allowtransparency="true" loading="lazy" style="width: 100%;"><br />
</iframe>
</p>
<p>Negative margins can also collapse with positive margins, as such the margins will be added together. From our example above, if the margin-top of <code>other-box</code> is 15px, then we&#8217;d have a <code>-15px</code> margin between the two elements.</p>
<h3>
  <a name="conclusion" href="#conclusion"><br />
  </a><br />
  Conclusion.<br />
</h3>
<p>It would save you a lot of stress and confusion if you just understand how it works, do some practice on it to make it stick. People who think margin collapse is not a big deal are those who wind up increasing margin size unnecessarily. When you know where you need your margins to collapse you can easily benefit from its benefits, then when you don&#8217;t need it to collapse you can stop it from collapsing.</p>
<p>Alright, that&#8217;s it for this article, let me know what you think about margins collapsing in the comment section. Also, remember you can hit me up on <a href="https://twitter.com/elijahtrillionz">Twitter @elijahtrillionz</a> if you need me, and please try to follow. Thanks for reading, see you next time.</p>
<p><a href="https://buymeacoffee.com/elijahtrillionz"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E8AFCN4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3bttdygfyhm1phhqouv.png" alt="Buy me a coffee" loading="lazy" width="545" height="153"/></a></p>
</p></div>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br />
<br /></p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../mastering-css-margin-collapse-with-practical-examples/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
